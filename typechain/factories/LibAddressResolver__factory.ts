/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { LibAddressResolver } from "../LibAddressResolver";

export class LibAddressResolver__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _libAddressManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibAddressResolver> {
    return super.deploy(
      _libAddressManager,
      overrides || {}
    ) as Promise<LibAddressResolver>;
  }
  getDeployTransaction(
    _libAddressManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_libAddressManager, overrides || {});
  }
  attach(address: string): LibAddressResolver {
    return super.attach(address) as LibAddressResolver;
  }
  connect(signer: Signer): LibAddressResolver__factory {
    return super.connect(signer) as LibAddressResolver__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibAddressResolver {
    return new Contract(address, _abi, signerOrProvider) as LibAddressResolver;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_libAddressManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "resolve",
    outputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102693803806102698339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610204806100656000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063461a447814610030575b600080fd5b6100d66004803603602081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100f2945050505050565b604080516001600160a01b039092168252519081900360200190f35b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561019c57600080fd5b505afa1580156101b0573d6000803e3d6000fd5b505050506040513d60208110156101c657600080fd5b50519291505056fea26469706673582212205db909fae8178d68bf45fc2ac845b44222c1e878270e32d5985aa6ba5007fd1f64736f6c63430007060033";
